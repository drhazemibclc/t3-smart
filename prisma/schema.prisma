// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


// Patient model
model Patient {
  id      String       @id @default(cuid())
  name    String
  birthDate DateTime
  age     Int
  gender  Gender
  contact String
  consultations Consultation[]
  medicalRecords MedicalRecord[]
  growthCharts GrowthChart[]
}

// Enum for gender
enum Gender {
  Male
  Female
  Other
}

// Consultation model
model Consultation {
  id        String   @id @default(cuid())
  patientId String
  notes     String
  date      DateTime // Use DateTime type for date representation

  patient   Patient @relation(fields: [patientId], references: [id])
}

// Medical Record model
model MedicalRecord {
  id          String   @id @default(cuid())
  patientId   String
  description String
  createdAt   DateTime @default(now()) // Automatically set the creation date

  patient     Patient @relation(fields: [patientId], references: [id])

  Prescription Prescription[]
}

// Prescription model
model Prescription {
  id        String   @id @default(cuid())
  recordId  String
  medication String
  dosage    String
  date      DateTime // Use DateTime type for date representation

  medicalRecord MedicalRecord @relation(fields: [recordId], references: [id])
}

// Growth Chart model
model GrowthChart {
  id        String       @id @default(cuid())
  patientId String   // Reference to the Patient model
  age       Int      // Age of the patient in years
  height    Float    // Height in cm (using Float for precision)
  weight    Float    // Weight in kg (using Float for precision)
  date      DateTime // Use DateTime type for date representation

  patient   Patient @relation(fields: [patientId], references: [id])
}

// Clinic Income model
model ClinicIncome {
  id        String   @id @default(cuid())
  amount    Float    // Income amount in currency units (using Float for precision)
  source    String    // Description of the income source
  date      DateTime // Use DateTime type for date representation
}